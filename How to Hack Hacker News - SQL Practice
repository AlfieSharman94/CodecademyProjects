 -- Alfie Sharman's How to Hack Hacker News - SQL Practice
 
 -- Q1 
 SELECT title, score
FROM hacker_news
ORDER BY score DESC
LIMIT 5;

-- First, find the total score of all the stories.
SELECT SUM(score)
from hacker_news;

--Find the individual users who have gotten combined scores of more than 200, and their combined scores.
SELECT user, SUM(score)
FROM hacker_news
GROUP by 1
HAVING sum(score) > 200
ORDER BY 2 DESC;

-- Then, we want to add these users’ scores together and divide by the total to get the percentage.
SELECT (517 + 309 + 304 + 282) / 6366.0 AS PERCENTAGE;

-- How many times has each offending user posted this link https://www.youtube.com/watch?v=dQw4w9WgXcQ ?

SELECT user, COUNT(*)
FROM hacker_news
WHERE url LIKE '%watch?v=dQw4w9WgXcQ%'
GROUP BY 1
ORDER BY 2 DESC;

-- Categorize each story based on their source.
SELECT CASE
   WHEN url LIKE '%github%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'OTHER'
  END AS 'Source'
FROM hacker_news;

-- Build on the previous query. Add a column for the number of stories from each URL
SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source',
  COUNT(*)
FROM hacker_news
GROUP BY 1;

-- Let’s write a query that returns three columns:
-- 1. The hours of the timestamp
-- 2. The average score for each hour
-- 3. The count of stories for each hour

SELECT strftime('%H', timestamp), AVG(score), COUNT(*)
FROM hacker_news
GROUP BY 1
ORDER BY 1;

-- Let’s edit a few things in the previous query:
-- 1. Round the average scores
-- 2. Rename the columns to make it more readable
-- 3. Filter out the NULL values in timestamp.
SELECT strftime('%H', timestamp) AS "Hour", ROUND(AVG(score),2) AS "Average Score", COUNT(*) AS "Stories"
FROM hacker_news
WHERE timestamp IS NOT NULL
GROUP BY 1
ORDER BY 1;
